// ============================================================================
// –ö–õ–£–ë–û–ö - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—è–∑–∞–Ω–∏—è
// ============================================================================

// ============================================================================
// 1. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ö–û–ù–°–¢–ê–ù–¢–´
// ============================================================================

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å fallback
function safeParse(json, fallback = []) {
    try {
        return JSON.parse(json);
    } catch {
        return fallback;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.projects = safeParse(localStorage.getItem('knittingProjects')) || [];
let schemes = safeParse(localStorage.getItem('knittingSchemes')) || [];
let currentProjectIndex = -1;
window.isProjectModalOpen = false;

// –ò–∫–æ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_PROJECT_ICON = 'üß∂';

// –ü–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
const COLOR_PRESETS = {
    light: {
        '--primary': '#fcd9b8',
        '--secondary': '#fef5ec',
        '--accent': '#f8cdda',
        '--dark': '#5d4a66',
        '--light': '#fef7ff',
        '--counter': '#fef5ec',
        '--counter-btn': '#fcd9b8',
    },
    dark: {
        '--primary': '#5432d1', // –Ø—Ä–∫–∏–π –∞–∫—Ü–µ–Ω—Ç –¥–ª—è –æ–±–≤–æ–¥–æ–∫
        '--secondary': '#1E1B29', // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        '--accent': '#9e70b5', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
        '--dark': '#9e70b5', // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (—Å–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
        '--light': '#2a2636', // –°–≤–µ—Ç–ª–µ–µ —á–µ–º secondary –¥–ª—è –∫–Ω–æ–ø–æ–∫
        '--counter': '#2a2636', // –§–æ–Ω —Å—á–µ—Ç—á–∏–∫–æ–≤
        '--counter-btn': '#3d2f5a', // –¢–µ–º–Ω–µ–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª–∫–∞—Ö
    }
};

// ============================================================================
// 2. –£–¢–ò–õ–ò–¢–´
// ============================================================================

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function escapeHtml(text) {
    return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function showSection(sectionId) {
    document.querySelectorAll('.section').forEach(section => {
        section.style.display = 'none';
    });
    document.getElementById(sectionId).style.display = 'block';
}

// ============================================================================
// 3. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò
// ============================================================================

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
function renderProjects() {
    const grid = document.getElementById('projectsGrid');
    grid.innerHTML = '';

    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
    const addProjectWrapper = document.createElement('div');
    addProjectWrapper.className = 'project-wrapper';
    addProjectWrapper.innerHTML = `
        <div class="project-card add-project">
            <div class="project-icon">+</div>
        </div>
    `;
    addProjectWrapper.querySelector('.project-card').onclick = createNewProject;
    grid.appendChild(addProjectWrapper);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects.forEach((project, index) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'project-wrapper';
        
        const icon = localStorage.getItem('customProjectIcon') || DEFAULT_PROJECT_ICON;
        wrapper.innerHTML = `
            <div class="project-card">
                <div class="project-icon">${icon}</div>
                <div class="project-name">${escapeHtml(project.name)}</div>
            </div>
            <button class="delete-project-card" onclick="deleteProjectCard(${index}, event)">√ó</button>
        `;
        
        const card = wrapper.querySelector('.project-card');
        card.onclick = (e) => {
            if (!e.target.closest('.delete-project-card')) {
                openProject(index);
            }
        };
        
        grid.appendChild(wrapper);
    });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
function createNewProject() {
    projects.push({ 
        name: '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', 
        counters: [] 
    });
    saveProjects();
    openProject(projects.length - 1);
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
 */
function openProject(index) {
    currentProjectIndex = index;
    const project = projects[index];
    
    document.getElementById('projectTitleInput').value = project.name;
    renderCounters();
    document.getElementById('projectModal').style.display = 'flex';
    window.isProjectModalOpen = true;
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
 */
function closeModal() {
    if (currentProjectIndex !== -1) {
        const newName = document.getElementById('projectTitleInput').value.trim();
        if (newName) {
            projects[currentProjectIndex].name = newName;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –≤ –Ω—ë–º –Ω–µ—Ç —Å—á—ë—Ç—á–∏–∫–æ–≤
        if (projects[currentProjectIndex].counters.length === 0) {
            projects.splice(currentProjectIndex, 1);
        }
        
        saveProjects();
        currentProjectIndex = -1;
    }
    
    document.getElementById('projectModal').style.display = 'none';
    window.isProjectModalOpen = false;
    renderProjects();
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
 */
function deleteProjectCard(index, event) {
    event.stopPropagation();
    
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?')) {
        projects.splice(index, 1);
        saveProjects();
        renderProjects();
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
function deleteProject() {
    if (currentProjectIndex === -1 || currentProjectIndex >= projects.length) return;
    
    if (confirm('–¢—ã —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
        projects.splice(currentProjectIndex, 1);
        saveProjects();
        closeModal();
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ localStorage –∏ Android
 */
function saveProjects() {
    const json = JSON.stringify(projects);
    localStorage.setItem('knittingProjects', json);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Android (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (typeof Android !== 'undefined' && Android.saveProjects) {
        Android.saveProjects(json);
    }
}

// ============================================================================
// 4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ß–Å–¢–ß–ò–ö–ê–ú–ò
// ============================================================================

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
window.renderCounters = function() {
    const list = document.getElementById('countersList');
    if (!list || currentProjectIndex < 0 || currentProjectIndex >= projects.length) return;
    
    list.innerHTML = '';
    const project = projects[currentProjectIndex];
    
    project.counters.forEach((counter, idx) => {
        const counterDiv = document.createElement('div');
        counterDiv.className = 'counter-item';
        counterDiv.innerHTML = `
            <div class="counter-header">
                <input type="text" class="counter-name" 
                       value="${escapeHtml(counter.name)}" 
                       onblur="updateCounterName(${idx}, this.value)">
                <button class="counter-btn" onclick="removeCounter(${idx})">√ó</button>
            </div>
            <div class="counter-controls">
                <div class="control-group">
                    <div class="control-label"><i>üß∂</i> –ü–µ—Ç–ª–∏</div>
                    <div class="control-value">
                        <button class="counter-btn" onclick="decrementStitch(${idx})">‚àí</button>
                        <div class="counter-value" id="stitch-${idx}" onclick="editStitch(${idx})">
                            ${counter.stitches}
                        </div>
                        <button class="counter-btn" onclick="incrementStitch(${idx})">+</button>
                    </div>
                </div>
                <div class="control-group">
                    <div class="control-label"><i>üìè</i> –†—è–¥—ã</div>
                    <div class="control-value">
                        <button class="counter-btn" onclick="decrementRow(${idx})">‚àí</button>
                        <div class="counter-value" id="row-${idx}" onclick="editRow(${idx})">
                            ${counter.rows}
                        </div>
                        <button class="counter-btn" onclick="incrementRow(${idx})">+</button>
                    </div>
                </div>
            </div>
        `;
        list.appendChild(counterDiv);
    });
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
 */
function addCounter() {
    if (currentProjectIndex === -1) return;
    
    projects[currentProjectIndex].counters.push({ 
        name: '–ù–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫', 
        stitches: 0, 
        rows: 0 
    });
    
    saveProjects();
    renderCounters();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—á—ë—Ç—á–∏–∫–∞
 */
function updateCounterName(index, value) {
    if (value.trim()) {
        projects[currentProjectIndex].counters[index].name = value.trim();
        saveProjects();
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
 */
function removeCounter(index) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—á—ë—Ç—á–∏–∫?')) return;
    
    projects[currentProjectIndex].counters.splice(index, 1);
    
    // –ï—Å–ª–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    if (projects[currentProjectIndex].counters.length === 0) {
        projects.splice(currentProjectIndex, 1);
        currentProjectIndex = -1;
        saveProjects();
        closeModal();
        return;
    }
    
    saveProjects();
    renderCounters();
}

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–æ–≤
function incrementStitch(index) {
    projects[currentProjectIndex].counters[index].stitches++;
    document.getElementById(`stitch-${index}`).textContent = 
        projects[currentProjectIndex].counters[index].stitches;
    saveProjects();
}

function decrementStitch(index) {
    if (projects[currentProjectIndex].counters[index].stitches > 0) {
        projects[currentProjectIndex].counters[index].stitches--;
        document.getElementById(`stitch-${index}`).textContent = 
            projects[currentProjectIndex].counters[index].stitches;
        saveProjects();
    }
}

function incrementRow(index) {
    projects[currentProjectIndex].counters[index].rows++;
    document.getElementById(`row-${index}`).textContent = 
        projects[currentProjectIndex].counters[index].rows;
    saveProjects();
}

function decrementRow(index) {
    if (projects[currentProjectIndex].counters[index].rows > 0) {
        projects[currentProjectIndex].counters[index].rows--;
        document.getElementById(`row-${index}`).textContent = 
            projects[currentProjectIndex].counters[index].rows;
        saveProjects();
    }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ç–µ–ª—å
 */
function editStitch(index) {
    showCustomPrompt(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ç–µ–ª—å:', 
        projects[currentProjectIndex].counters[index].stitches, 
        (value) => {
            const num = parseInt(value);
            if (!isNaN(num) && num >= 0) {
                projects[currentProjectIndex].counters[index].stitches = num;
                document.getElementById(`stitch-${index}`).textContent = num;
                saveProjects();
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            }
        }
    );
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä—è–¥–æ–≤
 */
function editRow(index) {
    showCustomPrompt(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤:', 
        projects[currentProjectIndex].counters[index].rows, 
        (value) => {
            const num = parseInt(value);
            if (!isNaN(num) && num >= 0) {
                projects[currentProjectIndex].counters[index].rows = num;
                document.getElementById(`row-${index}`).textContent = num;
                saveProjects();
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            }
        }
    );
}

// ============================================================================
// 5. –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–ê–ú–ò –ò –ì–ê–õ–ï–†–ï–ï–ô
// ============================================================================

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ö–µ–º –∏ —Ñ–∞–π–ª–æ–≤
 */
function renderSchemes() {
    const grid = document.getElementById('galleryGrid');
    grid.innerHTML = '';
    
    schemes.forEach((scheme, index) => {
        const item = document.createElement('div');
        item.className = 'gallery-item';
        
        // PDF —Ñ–∞–π–ª
        if (scheme.type === 'pdf') {
            item.innerHTML = `
                <div style="font-size: 2.5rem; margin-bottom: 8px;">üìÑ</div>
                <div style="font-size: 0.75rem; word-break: break-word;">
                    ${escapeHtml(scheme.name)}
                </div>
                <button class="delete-scheme-btn" onclick="deleteScheme(${index}, event)">√ó</button>
            `;
            item.onclick = () => openPdfFile(scheme);
        } 
        // –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
        else if (scheme.type === 'note') {
            item.innerHTML = `
                <div style="font-size: 2.5rem; margin-bottom: 8px;">üìù</div>
                <div style="font-size: 0.75rem; word-break: break-word;">
                    ${escapeHtml(scheme.name)}
                </div>
                <button class="delete-scheme-btn" onclick="deleteScheme(${index}, event)">√ó</button>
            `;
            item.onclick = () => openNote(index);
        } 
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        else {
            item.innerHTML = `
                <img src="${scheme.url}" alt="–°—Ö–µ–º–∞ ${index + 1}" 
                     style="width: 100%; height: 100%; object-fit: cover; border-radius: 10px;">
                <button class="delete-scheme-btn" onclick="deleteScheme(${index}, event)">√ó</button>
            `;
            item.querySelector('img').onclick = () => openImageModal(scheme.url);
        }
        
        grid.appendChild(item);
    });
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ PDF —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Android
 */
function openPdfFile(scheme) {
    if (typeof Android !== 'undefined' && Android.openFile) {
        let base64Url = scheme.url.startsWith('data:application/pdf;base64,')
            ? scheme.url
            : 'data:application/pdf;base64,' + scheme.url.replace(/^data:[^,]+,/, '');
        Android.openFile(base64Url);
    } else {
        alert('PDF –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.');
    }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, PDF, —Ç–µ–∫—Å—Ç)
 */
function addImage(input) {
    if (!input.files || !input.files[0]) return;
    
    const file = input.files[0];
    const reader = new FileReader();
    
    reader.onload = function(e) {
        // PDF —Ñ–∞–π–ª
        if (file.type === 'application/pdf') {
            let base64Url = e.target.result;
            if (!base64Url.startsWith('data:application/pdf;base64,')) {
                base64Url = 'data:application/pdf;base64,' + base64Url.split(',')[1];
            }
            schemes.push({ 
                type: 'pdf', 
                url: base64Url, 
                name: file.name 
            });
        } 
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        else if (file.type.startsWith('image/')) {
            schemes.push({ 
                type: 'image', 
                url: e.target.result 
            });
        } 
        // –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        else if (file.type === 'text/plain' || file.name.toLowerCase().endsWith('.txt')) {
            schemes.push({ 
                type: 'note', 
                content: e.target.result, 
                name: file.name 
            });
        } 
        else {
            alert('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, PDF –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt).');
            input.value = '';
            return;
        }
        
        saveSchemes();
        renderSchemes();
    };
    
    // –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —á—Ç–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (file.type === 'application/pdf' || file.type.startsWith('image/')) {
        reader.readAsDataURL(file);
    } else {
        reader.readAsText(file);
    }
    
    input.value = '';
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã
 */
function deleteScheme(index, event) {
    event.stopPropagation();
    
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?')) {
        schemes.splice(index, 1);
        saveSchemes();
        renderSchemes();
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ö–µ–º –≤ localStorage
 */
function saveSchemes() {
    localStorage.setItem('knittingSchemes', JSON.stringify(schemes));
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
 */
function openImageModal(imageUrl) {
    document.getElementById('modalImage').src = imageUrl;
    document.getElementById('imageModal').style.display = 'flex';
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function closeImageModal() {
    document.getElementById('imageModal').style.display = 'none';
}

// ============================================================================
// 6. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ê–ú–ò
// ============================================================================

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function openNote(index) {
    if (index < 0 || index >= schemes.length || schemes[index].type !== 'note') return;
    
    const note = schemes[index];
    const modal = document.getElementById('noteModal');
    
    modal.style.display = 'flex';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 90vw; max-height: 90vh; display: flex; flex-direction: column;">
            <span class="close-modal" onclick="closeNoteModal()" style="align-self: flex-end;">&times;</span>
            <div class="modal-title" style="padding-bottom: 8px; border-bottom: 1px solid var(--primary);">
                <span id="noteTitleDisplay" onclick="editNoteName(${index})">
                    ${escapeHtml(note.name)}
                </span>
            </div>
            <textarea id="noteContentArea" style="margin-top: 16px;">
                ${escapeHtml(note.content)}
            </textarea>
        </div>
    `;
    
    document.getElementById('noteContentArea').focus();
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–º–µ—Ç–∫–∏
 */
function closeNoteModal() {
    const modal = document.getElementById('noteModal');
    
    if (modal.style.display === 'flex') {
        const textarea = document.getElementById('noteContentArea');
        const titleDisplay = document.getElementById('noteTitleDisplay');
        
        if (textarea && titleDisplay) {
            const currentNoteName = titleDisplay.textContent.trim();
            const index = schemes.findIndex(s => s.type === 'note' && s.name === currentNoteName);
            
            if (index !== -1) {
                schemes[index].content = textarea.value;
                saveSchemes();
                renderSchemes();
            }
        }
    }
    
    modal.style.display = 'none';
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∑–∞–º–µ—Ç–∫–∏
 */
function editNoteName(index) {
    if (index < 0 || index >= schemes.length || schemes[index].type !== 'note') return;
    
    const currentName = schemes[index].name;
    
    showCustomPromptForText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', currentName, (newName) => {
        if (newName && newName.trim()) {
            schemes[index].name = newName.trim();
            saveSchemes();
            renderSchemes();
            
            const titleDisplay = document.getElementById('noteTitleDisplay');
            if (titleDisplay) {
                titleDisplay.textContent = schemes[index].name;
            }
        }
    });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
 */
function createNewNote() {
    document.getElementById('newNoteNameInput').value = '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞';
    document.getElementById('newNoteContentInput').value = '';
    document.getElementById('createNoteModal').style.display = 'flex';
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
 */
function closeCreateNoteModal() {
    document.getElementById('createNoteModal').style.display = 'none';
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
 */
function saveNewNote() {
    let name = document.getElementById('newNoteNameInput').value.trim();
    const content = document.getElementById('newNoteContentInput').value;
    
    if (!name) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞.');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!name.toLowerCase().endsWith('.txt')) {
        name += '.txt';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    const existingIndex = schemes.findIndex(s => s.type === 'note' && s.name === name);
    if (existingIndex !== -1) {
        if (!confirm('–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?')) {
            return;
        }
        schemes[existingIndex].content = content;
    } else {
        schemes.push({ 
            type: 'note', 
            name: name, 
            content: content 
        });
    }
    
    saveSchemes();
    renderSchemes();
    closeCreateNoteModal();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showUploadMenu() {
    document.getElementById('uploadMenuModal').style.display = 'flex';
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏
 */
function closeUploadMenu() {
    document.getElementById('uploadMenuModal').style.display = 'none';
}

// ============================================================================
// 7. –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ü–ï–¢–ï–õ–¨ –ò –†–Ø–î–û–í
// ============================================================================

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
function nextStep() {
    const currentWidth = parseFloat(document.getElementById('currentWidth').value);
    const currentLength = parseFloat(document.getElementById('currentLength').value);
    const currentStitches = parseFloat(document.getElementById('currentStitches').value);
    const currentRows = parseFloat(document.getElementById('currentRows').value);
    
    if (isNaN(currentWidth) || isNaN(currentLength) || isNaN(currentStitches) || isNaN(currentRows) ||
        currentWidth <= 0 || currentLength <= 0 || currentStitches <= 0 || currentRows <= 0) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.');
        return;
    }
    
    document.getElementById('step1').style.display = 'none';
    document.getElementById('step2').style.display = 'block';
}

/**
 * –†–∞—Å—á—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ç–µ–ª—å –∏ —Ä—è–¥–æ–≤
 */
function calculate() {
    const currentWidth = parseFloat(document.getElementById('currentWidth').value);
    const currentLength = parseFloat(document.getElementById('currentLength').value);
    const currentStitches = parseFloat(document.getElementById('currentStitches').value);
    const currentRows = parseFloat(document.getElementById('currentRows').value);
    const desiredWidth = parseFloat(document.getElementById('desiredWidth').value);
    const desiredLength = parseFloat(document.getElementById('desiredLength').value);
    
    if (isNaN(desiredWidth) || isNaN(desiredLength) || desiredWidth <= 0 || desiredLength <= 0) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∂–µ–ª–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.');
        return;
    }
    
    // –†–∞—Å—á—ë—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤—è–∑–∞–Ω–∏—è
    const stitchesPerCm = currentStitches / currentWidth;
    const rowsPerCm = currentRows / currentLength;
    
    // –†–∞—Å—á—ë—Ç —Ç—Ä–µ–±—É–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const requiredStitches = Math.round(stitchesPerCm * desiredWidth);
    const requiredRows = Math.round(rowsPerCm * desiredLength);
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const resultDiv = document.getElementById('calcResult');
    resultDiv.innerHTML = `
        <p>–¢—Ä–µ–±—É–µ—Ç—Å—è: <strong>${requiredStitches} –ø.</strong> –∏ <strong>${requiredRows} —Ä.</strong></p>
    `;
    
    document.getElementById('step2').style.display = 'none';
    document.getElementById('step3').style.display = 'block';
}

/**
 * –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
 */
function backToStep2() {
    document.getElementById('step3').style.display = 'none';
    document.getElementById('step2').style.display = 'block';
}

/**
 * –°–±—Ä–æ—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
function resetCalculator() {
    document.getElementById('currentWidth').value = '';
    document.getElementById('currentLength').value = '';
    document.getElementById('currentStitches').value = '';
    document.getElementById('currentRows').value = '';
    document.getElementById('desiredWidth').value = '';
    document.getElementById('desiredLength').value = '';
    document.getElementById('calcResult').innerHTML = '';
    
    document.getElementById('step3').style.display = 'none';
    document.getElementById('step2').style.display = 'none';
    document.getElementById('step1').style.display = 'block';
}

// ============================================================================
// 8. –ù–ê–°–¢–†–û–ô–ö–ò –¶–í–ï–¢–û–í–û–ô –ü–ê–õ–ò–¢–†–´
// ============================================================================

let pickrInstances = []; // –•—Ä–∞–Ω–∏–ª–∏—â–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Pickr

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
 */
function applyPalette(palette) {
    Object.entries(palette).forEach(([varName, value]) => {
        document.documentElement.style.setProperty(varName, value);
    });
    localStorage.setItem('customPalette', JSON.stringify(palette));
    refreshSwatches(palette);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫—Ä—É–∂–∫–æ–≤
 */
function refreshSwatches(palette) {
    Object.entries(palette).forEach(([varName, value]) => {
        const swatch = document.querySelector(`.color-swatch[data-var="${varName}"]`);
        if (swatch) {
            swatch.style.backgroundColor = value;
        }
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pickr –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤
 */
function initializeColorPickers() {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    pickrInstances.forEach(pickr => pickr.destroyAndRemove());
    pickrInstances = [];
    
    document.querySelectorAll('.color-swatch').forEach(swatch => {
        const varName = swatch.dataset.var;
        const initial = getComputedStyle(document.documentElement)
            .getPropertyValue(varName).trim();
        
        swatch.style.backgroundColor = initial;
        
        const pickr = Pickr.create({
            el: swatch,
            theme: 'classic',
            default: initial,
            components: {
                preview: true,
                opacity: false,
                hue: true,
                interaction: { 
                    input: true, 
                    save: true, 
                    cancel: true 
                }
            },
            i18n: {
                'ui:dialog': '–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞',
                'btn:save': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                'btn:cancel': '–û—Ç–º–µ–Ω–∞',
                'btn:input': '–í–≤–µ—Å—Ç–∏ HEX',
                'lbl:hex': 'HEX'
            }
        });
        
        pickr.on('save', color => {
            const hex = color.toHEXA().toString();
            applyPalette({ [varName]: hex });
            pickr.hide();
        });
        
        pickr.on('cancel', () => pickr.hide());
        
        pickrInstances.push(pickr);
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
 */
function initializeThemeButtons() {
    document.querySelectorAll('[data-palette]').forEach(btn => {
        btn.addEventListener('click', () => {
            const paletteName = btn.dataset.palette;
            applyPalette(COLOR_PRESETS[paletteName]);
        });
    });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã
 */
function loadSavedPalette() {
    const savedPalette = JSON.parse(localStorage.getItem('customPalette') || '{}');
    if (Object.keys(savedPalette).length) {
        applyPalette(savedPalette);
    }
}

// ============================================================================
// 9. –ù–ê–°–¢–†–û–ô–ö–ò –ò–ö–û–ù–ö–ò –ü–†–û–ï–ö–¢–ê
// ============================================================================

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
 */
function applyProjectIcon(icon) {
    document.querySelectorAll('.project-card .project-icon').forEach(el => {
        if (el && !el.closest('.add-project')) {
            el.textContent = icon;
        }
    });
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–∏
 */
function saveProjectIcon(icon) {
    localStorage.setItem('customProjectIcon', icon);
    applyProjectIcon(icon);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–∏
 */
function loadProjectIcon() {
    const icon = localStorage.getItem('customProjectIcon') || DEFAULT_PROJECT_ICON;
    applyProjectIcon(icon);
    
    document.querySelectorAll('.icon-choice').forEach(btn => {
        btn.classList.toggle('selected', btn.dataset.icon === icon);
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏
 */
function initializeIconButtons() {
    document.querySelectorAll('.icon-choice').forEach(btn => {
        btn.onclick = () => {
            saveProjectIcon(btn.dataset.icon);
            loadProjectIcon();
        };
    });
}

// ============================================================================
// 10. –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –ü–†–û–ú–ü–¢–´
// ============================================================================

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
 */
function showCustomPrompt(title, defaultValue, callback) {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0, 0, 0, 0.5); display: flex;
        justify-content: center; align-items: center;
        z-index: 9999; padding: 16px;
    `;
    
    const dialog = document.createElement('div');
    dialog.style.cssText = `
        background: white; border-radius: 12px; padding: 20px;
        width: 90%; max-width: 300px; box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        display: flex; flex-direction: column; gap: 16px;
    `;
    
    const titleEl = document.createElement('h3');
    titleEl.textContent = title;
    titleEl.style.cssText = 'margin: 0 0 12px; font-weight: 600; color: #5d4a66;';
    dialog.appendChild(titleEl);
    
    const input = document.createElement('input');
    input.type = 'number';
    input.value = defaultValue;
    input.style.cssText = `
        width: 100%; padding: 10px; border: 2px solid #eee;
        border-radius: 8px; font-size: 1rem; outline: none;
        transition: border-color 0.3s; min-height: 40px;
    `;
    input.focus();
    dialog.appendChild(input);
    
    const buttonContainer = document.createElement('div');
    buttonContainer.style.cssText = 'display: flex; gap: 12px; justify-content: flex-end;';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.textContent = '–û—Ç–º–µ–Ω–∏—Ç—å';
    cancelBtn.style.cssText = `
        background: #fcd9b8; color: #5d4a66; border: none;
        padding: 8px 16px; border-radius: 8px; cursor: pointer; font-weight: 600;
    `;
    cancelBtn.onclick = () => document.body.removeChild(modal);
    buttonContainer.appendChild(cancelBtn);
    
    const okBtn = document.createElement('button');
    okBtn.textContent = '–û–ö';
    okBtn.style.cssText = `
        background: #5d4a66; color: white; border: none;
        padding: 8px 16px; border-radius: 8px; cursor: pointer; font-weight: 600;
    `;
    okBtn.onclick = () => {
        callback(input.value);
        document.body.removeChild(modal);
    };
    buttonContainer.appendChild(okBtn);
    
    dialog.appendChild(buttonContainer);
    modal.appendChild(dialog);
    document.body.appendChild(modal);
    
    modal.onclick = (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    };
    dialog.onclick = (e) => e.stopPropagation();
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
 */
function showCustomPromptForText(title, defaultValue, callback) {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0, 0, 0, 0.5); display: flex;
        justify-content: center; align-items: center;
        z-index: 9999; padding: 16px;
    `;
    
    const dialog = document.createElement('div');
    dialog.style.cssText = `
        background: white; border-radius: 12px; padding: 20px;
        width: 90%; max-width: 400px; max-height: 80vh;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        display: flex; flex-direction: column; gap: 16px;
    `;
    
    const titleEl = document.createElement('h3');
    titleEl.textContent = title;
    titleEl.style.cssText = 'margin: 0 0 12px; font-weight: 600; color: #5d4a66;';
    dialog.appendChild(titleEl);
    
    const textarea = document.createElement('textarea');
    textarea.value = defaultValue;
    textarea.style.cssText = `
        width: 100%; height: 150px; padding: 10px;
        border: 2px solid #eee; border-radius: 8px;
        font-size: 1rem; outline: none; transition: border-color 0.3s;
        resize: vertical;
    `;
    textarea.focus();
    dialog.appendChild(textarea);
    
    const buttonContainer = document.createElement('div');
    buttonContainer.style.cssText = 'display: flex; gap: 12px; justify-content: flex-end;';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.textContent = '–û—Ç–º–µ–Ω–∏—Ç—å';
    cancelBtn.style.cssText = `
        background: #fcd9b8; color: #5d4a66; border: none;
        padding: 8px 16px; border-radius: 8px; cursor: pointer; font-weight: 600;
    `;
    cancelBtn.onclick = () => document.body.removeChild(modal);
    buttonContainer.appendChild(cancelBtn);
    
    const okBtn = document.createElement('button');
    okBtn.textContent = '–û–ö';
    okBtn.style.cssText = `
        background: #5d4a66; color: white; border: none;
        padding: 8px 16px; border-radius: 8px; cursor: pointer; font-weight: 600;
    `;
    okBtn.onclick = () => {
        callback(textarea.value);
        document.body.removeChild(modal);
    };
    buttonContainer.appendChild(okBtn);
    
    dialog.appendChild(buttonContainer);
    modal.appendChild(dialog);
    document.body.appendChild(modal);
    
    modal.onclick = (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    };
    dialog.onclick = (e) => e.stopPropagation();
}

// ============================================================================
// 11. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° ANDROID
// ============================================================================

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Android
 */
window.updateProjectsFromAndroid = function(jsonString) {
    try {
        const parsed = JSON.parse(jsonString);
        if (Array.isArray(parsed)) {
            window.projects = parsed;
            localStorage.setItem('knittingProjects', jsonString);
            renderProjects();
            
            if (window.isProjectModalOpen && typeof window.renderCounters === 'function') {
                window.renderCounters();
            }
        } else {
            console.warn('Received non-array data from Android:', jsonString);
        }
    } catch (e) {
        console.error('Failed to parse projects from Android:', e, jsonString);
    }
};

// ============================================================================
// 12. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
document.addEventListener('DOMContentLoaded', function() {
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    renderProjects();
    renderSchemes();
    showSection('projects');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    loadSavedPalette();
    loadProjectIcon();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –ø–∏–∫–µ—Ä–æ–≤
    initializeThemeButtons();
    initializeIconButtons();
    initializeColorPickers();
});
